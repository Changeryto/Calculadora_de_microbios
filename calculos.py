import math as mt

nmpCol = {
  "0,0,0": "< 3",
  "0,0,1": 3,
  "0,1,0": 3,
  "1,0,0": 4,
  "1,0,1": 7,
  "1,1,0": 7,
  "1,1,1": 11,
  "1,2,0": 11,
  "2,0,0": 9,
  "2,0,1": 14,
  "2,1,0": 15,
  "2,1,1": 20,
  "2,2,0": 21,
  "2,2,1": 28,
  "3,0,0": 23,
  "3,0,1": 39,
  "3,0,2": 64,
  "3,1,0": 43,
  "3,1,1": 75,
  "3,1,2": 120,
  "3,2,0": 93,
  "3,2,1": 150,
  "3,2,2": 210,
  "3,3,0": 240,
  "3,3,1": 460,
  "3,3,2": 1100,
  "3,3,3": "â‰¥ 2400"}


nmpDil = {
    "0,0,0": 3.0, # < 3.0 no olvidar que es
    "0,0,1": 3.0,
    "0,0,2": 6.0,
    "0,0,3": 9.0,
    "0,1,0": 3.0,
    "0,1,1": 6.1,
    "0,1,2": 9.2,
    "0,1,3": 12.0,
    "0,2,0": 6.2,
    "0,2,1": 9.3,
    "0,2,2": 12.0,
    "0,2,3": 16.0,
    "0,3,0": 9.4,
    "0,3,1": 13.0,
    "0,3,2": 16.0,
    "0,3,3": 19.0,
    "1,0,0": 3.6,
    "1,0,1": 7.2,
    "1,0,2": 11.0,
    "1,0,3": 15.0,
    "1,1,0": 7.3,
    "1,1,1": 11.0,
    "1,1,2": 15.0,
    "1,1,3": 19.0,
    "1,2,0": 11.0,
    "1,2,1": 15.0,
    "1,2,2": 20.0,
    "1,2,3": 24.0,
    "1,3,0": 16.0,
    "1,3,1": 20.0,
    "1,3,2": 24.0,
    "1,3,3": 29.0,
    "2,0,0": 9.1,
    "2,0,1": 14.0,
    "2,0,2": 20.0,
    "2,0,3": 26.0,
    "2,1,0": 15.0,
    "2,1,1": 20.0,
    "2,1,2": 27.0,
    "2,1,3": 34.0,
    "2,2,0": 21.0,
    "2,2,1": 28.0,
    "2,2,2": 35.0,
    "2,2,3": 42.0,
    "2,3,0": 29.0,
    "2,3,1": 36.0,
    "2,3,2": 44.0,
    "2,3,3": 53.0,
    "3,0,0": 23.0,
    "3,0,1": 39.0,
    "3,0,2": 64.0,
    "3,0,3": 95.0,
    "3,1,0": 43.0,
    "3,1,1": 75.0,
    "3,1,2": 120.0,
    "3,1,3": 160.0,
    "3,2,0": 93.0,
    "3,2,1": 150.0,
    "3,2,2": 210.0,
    "3,2,3": 290.0,
    "3,3,0": 240.0,
    "3,3,1": 460.0,
    "3,3,2": 1100.0,
    "3,3,3": 1100.0, # No olvidar que es > 1100.0
}


class Calculos:
    
    @staticmethod
    def ufc_u(col, alic, dil):

        ufc = col * (1 / alic) * (1 / dil)
        return ufc
    
    @staticmethod
    def nmp_col(a, b, c):
        
        ky = (str(a)+","+str(b)+","+str(c))
        return str(nmpCol[ky])
            
    @staticmethod
    def cal_col(a,b,c):
        cal = (((a+b+c)*100)/(mt.sqrt( ((3-a)*10 + (3-b)*1 + (3-c)*0.1) * 33.3)))
        return str(round(cal, 4))
            
    @staticmethod
    def nmp_dil(a, b, c, inter):
        ky = (str(a)+","+str(b)+","+str(c))
        
        if inter == 1e-2:
            return str(nmpDil[ky])
        else:
            nmp = (nmpDil[ky] / 100) * 1/inter
            nmp = round(nmp, 4)
            return str(nmp)
        
    @staticmethod
    def bs(num, hum):
        bs = num / (1-(hum/100))
        return bs
        
#        if ky == "0,0,0":
#            return "< " + str(nmp)
#        elif ky == "3,3,3":
#            return "> " + str(nmp)
#        else:
#            return str(nmp)
        
        
